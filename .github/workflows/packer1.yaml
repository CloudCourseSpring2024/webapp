name: Integration Tests and Artifact Build

on:
  push:
    branches:
      - main
env:
  PROJECT_ID: ${{ secrets.PROJECTID }}
  GCP_SA_KEY: ${{ secrets.GCP_IAM_KEYS }}
  GCP_REGION: 'us-central1'  
  MIG_NAME: 'webapp-manager'  
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
  NETWORK: 'vpc-tf' 
  SUBNETWORK: 'webapp'
jobs:
  build:
    name: CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Install MySQL server
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql
          sudo systemctl status mysql
          sudo mysql --user=root --password=root -e "CREATE DATABASE IF NOT EXISTS cloudcourse; \
                                                USE cloudcourse; \
                                                CREATE TABLE IF NOT EXISTS Users (
                                                  id CHAR(36) BINARY PRIMARY KEY,
                                                  firstname VARCHAR(255) NOT NULL,
                                                  lastname VARCHAR(255) NOT NULL,
                                                  username VARCHAR(255) NOT NULL UNIQUE,
                                                  password VARCHAR(255) NOT NULL,
                                                  createdAt DATETIME NOT NULL,
                                                  updatedAt DATETIME NOT NULL
                                                );"
                                          
      - name: Set up environment variables
        run: |
          echo "DB_DIALECT=mysql" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_USERNAME=root" >> $GITHUB_ENV
          echo "DB_PASSWORD=root" >> $GITHUB_ENV
          echo "DB_NAME=cloudcourse" >> $GITHUB_ENV
      - name: Start server in background
        run: npm start &
      - name: Run tests
        run: npm test

      - name: Build application artifact
        run: zip -r application.zip ./*

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: application
          path: application.zip

      - name: Upload script artifacts
        uses: actions/upload-artifact@v2
        with:
          name: scripts
          path: |
            /tmp/nodeinstallement.sh
            /tmp/permissions.sh
            /tmp/nodeindex.sh
            /tmp/ops_agent_install.sh
            /tmp/ops_config.sh
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: electric-clone-412119
          service_account_key: ${{secrets.MYKEY}}
          export_default_credentials: true

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: latest

      - name: Initialize Packer
        run: packer init packer.pkr.hcl

      - name: Make scripts executable
        run: |
          chmod +x nodeinstallement.sh
          chmod +x permissions.sh
          chmod +x nodeindex.sh
          chmod +x ops_agent_install.sh
          chmod +x ops_config.sh

      - name: Build Google Cloud image with Packer
        run: packer build packer.pkr.hcl
      
      - name: List files in the root and /tmp directory
        run: |
           ls -lah
           ls -lah /tmp
           
      - name: List files in the /tmp directory
        run: |
            ls -lah /tmp

    # Build Machine Image with Packer
      - name: Build Machine Image with Packer
        run: |
             packer init .
             ls -lah /tmp    
              packer build  -var 'project_id=${{ secrets.GCP_PROJECT_ID }}' packer.pkr.hcl

 #  CD 
    
      - name: Get the latest image name
        id: get-latest-image
        run: |
          IMAGE_NAME=$(gcloud compute images list --filter="name:custom-image*" --format="get(name)" --sort-by="~creationTimestamp" --limit=1)
          echo "Latest image name is $IMAGE_NAME"
          echo "::set-output name=image_name::$IMAGE_NAME"

    # Create a new instance template with the new image and startup script
      - name: Create a new instance template with startup script
        run: |
          gcloud compute instance-templates create "${{ env.MIG_NAME }}-template-${{ steps.get-latest-image.outputs.image_name  }}" \
            --machine-type=e2-medium \
            --image="${{ steps.get-latest-image.outputs.image_name }}" \
            --image-project=${{ env.PROJECT_ID }} \
            --region=${{ env.GCP_REGION }} \
            --network="projects/${{ env.PROJECT_ID }}/global/networks/${{ env.NETWORK }}" \
            --subnet="projects/${{ env.PROJECT_ID }}/regions/${{ env.GCP_REGION }}/subnetworks/${{ env.SUBNETWORK }}" \
            --metadata=DB_HOST="${{ secrets.DB_HOST }}",DB_NAME="${{ secrets.DB_NAME }}",DB_PASSWORD="${{ secrets.DB_PASSWORD }}",DB_USER="${{ secrets.DB_USER }}",PORT="${{ secrets.PORT }}" \
            --service-account='${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}' \
            --scopes='https://www.googleapis.com/auth/cloud-platform'


      # Update managed instance group with the new template
      - name: Update managed instance group
        run: |
          gcloud compute instance-groups managed set-instance-template ${{ env.MIG_NAME }} \
            --template="${{ env.MIG_NAME }}-template-${{ steps.get-latest-image.outputs.image_name }}" \
            --region=${{ env.GCP_REGION }}

      # Start a basic rolling update
      - name: Start a basic rolling update
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ env.MIG_NAME }} \
            --version template="${{ env.MIG_NAME }}-template-${{ steps.get-latest-image.outputs.image_name }}" \
            --region=${{ env.GCP_REGION }} \
            --max-surge=3 \
            --max-unavailable=0
